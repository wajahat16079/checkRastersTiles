library(raster)
str_name<-'WDPA_50Rich_8Bit.tif'
imported_raster=raster(str_name)
View(imported_raster)
library(mapview)
str_name<-'WDPA_50Rich_8Bit.tif'
imported_raster=raster(str_name)
# Set the output directory for the tiles
output_dir <- "tiles_directory"
# Create tiles using mapview
mapviewTiles <- mapview(imported_raster, zcol = NULL,
tms = TRUE, col.regions = NULL,
crs = NULL, maxPixels = 1e+08,
maxPoints = 1e+05, maxFeatures = NULL,
zoom = NULL, maxZoom = NULL, tileSize = 256,
subdomains = NULL, group = NULL, layer.name = NULL,
tag = NULL, base = FALSE, encoding = "utf-8",
auto.pause = TRUE, opacity = 1, noFade = FALSE,
fitBounds = TRUE, zIndex = NULL, attribution = NULL,
bounds = NULL, minZoom = NULL, remove = TRUE,
inLegend = FALSE, legendOpacities = NULL, legendWidths = NULL,
cex = NULL, lwd = NULL, file = NULL, dir = output_dir)
str(imported_raster)
#imgPath = paste(projectPath,"data/cea.tif", sep = "")
#imgPath = paste(projectPath,"data/o41078a1.tif", sep = "") # bigger than standard max size (15431804 bytes is greater than maximum 4194304 bytes)
# imgPath = paste(projectPath,"data/SP27GTIF.TIF", sep = "")
imgPath = 'WDPA_50Rich_8Bit.tif'
outPath = paste(projectPath, "leaflethtmlgen.html", sep="")
# load raster image file
r <- raster(imgPath)
# color palette, which is interpolated ?
pal <- colorNumeric(c("#000000", "#666666", "#FFFFFF"), values(r),
na.color = "transparent")
library(htmlwidgets)
library(raster)
library(leaflet)
# color palette, which is interpolated ?
pal <- colorNumeric(c("#000000", "#666666", "#FFFFFF"), values(r),
na.color = "transparent")
# create the leaflet widget
leaflet() %>%
addTiles() %>%
addRasterImage(r, colors=pal, opacity = 0.9, maxBytes = 123123123) %>%
addLegend(pal = pal, values = values(r), title = "Test")
# create the leaflet widget
leaflet() %>%
addTiles() %>%
# addRasterImage(r, colors=pal, opacity = 0.9, maxBytes = 123123123) %>%
addRasterImage(r, colors=pal, opacity = 0.9) %>%
addLegend(pal = pal, values = values(r), title = "Test")
shiny::runApp('C:/Users/SWajahatAli/Downloads/birdRanger')
feature_name <<- getPolygonString(curSpecies)
feature_name
setwd("C:/Users/SWajahatAli/Downloads/birdRanger/data/Polygons/WDPA")
feature <- st_read("WDPA_cleanFinal.shp")
st_crs(feature) <- "+proj=aea +lat_1=-5 +lat_2=-42 +lat_0=-32 +lon_0=-60 +x_0=0 +y_0=0 +ellps=aust_SA +datum=WGS84 +units=m +no_defs"
feature <- st_transform(feature, crs = "EPSG:4326")
View(feature)
View(feature)
View(feature)
View(feature)
feature <- st_read("WDPA_cleanFinal.shp")
showNotification("Loading Data, should only take a few seconds!", type = "message")
st_crs(feature) <- "+proj=aea +lat_1=-5 +lat_2=-42 +lat_0=-32 +lon_0=-60 +x_0=0 +y_0=0 +ellps=aust_SA +datum=WGS84 +units=m +no_defs"
feature <- st_transform(feature, crs = "EPSG:4326")
str(feature)
leaflet() %>%
# setView(lng = 5, lat = 5, zoom = 5) %>%
addTiles() %>%
addPolygons(data = feature, layerId = "poly", group = "Habitat", weight = 0, color = "#0d4201", opacity = 1, fillOpacity = 07)
leaflet() %>%
# setView(lng = 5, lat = 5, zoom = 5) %>%
addTiles()
leaflet() %>%
# setView(lng = 5, lat = 5, zoom = 5) %>%
addTiles() %>%
addPolygons(data = feature, layerId = "poly", color = "#0d4201", opacity = 1, fillOpacity = 07)
setwd("C:/Users/SWajahatAli/Downloads/birdRanger/Aggregated")
#Load
library("jpeg")
library("tiff")
img <- readTIFF('WDPA_50Rich_8Bit.tif', native=TRUE)
writeJPEG(img, target = "Converted.jpeg", quality = 1)
runApp('C:/Users/SWajahatAli/Downloads/birdRanger')
temp <- paste(level[as.character(input$threshold)],"/{z}/{x}/{-y}.png",sep="")
temp
# biodivProxy <- leafletProxy("biodiv", session = session)
biodivProxy <- leafletProxy("biodiv2", session = session)
biodivProxy %>%
clearGroup("overlay") %>%
addTiles(urlTemplate = temp,
group = 'overlay',
tileOptions(opacity = 0.7))
biodivProxy %>%
clearGroup("overlay") %>%
addTiles(urlTemplate = temp,
group = 'overlay',
tileOptions(opacity = 0.7))
View(biodivProxy)
runApp('C:/Users/SWajahatAli/Downloads/birdRanger')
# Load Required Packages
library(raster)
library(gdalUtils)
devtools:::install_github("gearslaboratory/gdalUtils")
# devtools:::install_github("gearslaboratory/gdalUtils")
library(gdalUtils)
library(png)
# Define input and output paths
input_tif <- "input.tif"
output_dir <- "tiles"
# Convert TIF to PNG
output_png <- file.path(tempdir(), "output.png")
gdal_translate(input_tif, output_png, of = "PNG")
setwd("C:/Users/SWajahatAli/Downloads/birdRanger/Aggregated")
str_name<-'WDPA_50Rich_8Bit.tif'
tile_layer <- raster(str_name)
m <- leaflet() %>%
setView(lng = mean(extent(tile_layer)[1:2]), lat = mean(extent(tile_layer)[3:4]), zoom = 10) %>%
addTiles() %>%
addRasterImage(tile_layer, maxBytes = 50000000)
m
View(tile_layer)
library(tiler)
library(tiler)
library(tiler)
tile(str_name, "tiles", "0-10")
map <- system.file(str_name, package = "tiler")
(r <- brick(map))
r <- brick(map)
system.file(str_name, package = "tiler")
getwd()
r <- brick(str_name)
plot(r)
pal <- colorRampPalette(c("darkblue", "lightblue"))(20)
pal
nodata <- "tomato"
tile(str_name, tile_dir, "0-3", col = pal, colNA = nodata)
tile(str_name, "tiles", "0-3", col = pal, colNA = nodata)
setwd("C:/Users/SWajahatAli/Downloads/tiffCheck")
library(tiler)
library(raster)
library(mapview)
str_name<-'WDPA_50Rich_8Bit.tif'
tile_layer <- raster(str_name)
map <- system.file(str_name, package = "tiler")
tile(str_name, "tiles", "0-10")
r <- brick(str_name)
plot(r)
library(tiler)
library(raster)
library(mapview)
str_name<-'WDPA_50Rich_8Bit.tif'
tile_layer <- raster(str_name)
r <- brick(str_name)
plot(r)
# map <- system.file("maps/map_wgs84.tif", package = "tiler")
pal <- colorRampPalette(c("darkblue", "lightblue"))(20)
nodata <- "tomato"
tile(str_name, "tiles", "0-3", col = pal, colNA = nodata)
list.files("tiles")
list.files("tiles")
plot(r)
# map <- system.file("maps/map_wgs84.tif", package = "tiler")
pal <- colorRampPalette(c("darkblue", "lightblue"))(20)
nodata <- "tomato"
pal
nodata
str_name
# map <- system.file(str_name, package = "tiler")
map <- 'WDPA_50Rich_8Bit.tif'
tile(str_name, "tiles", "0-10")
r <- brick(str_name)
(r <- raster(map))
#> class      : RasterLayer
#> dimensions : 32, 71, 2272  (nrow, ncol, ncell)
#> resolution : 0.8333333, 0.8333333  (x, y)
#> extent     : -125.0208, -65.85417, 23.27083, 49.9375  (xmin, xmax, ymin, ymax)
#> crs        : +proj=longlat +datum=WGS84 +no_defs
#> source     : map_wgs84.tif
#> names      : map_wgs84
#> values     : -0.7205295, 5.545086  (min, max)
plot(r)
#> class      : RasterLayer
#> dimensions : 32, 71, 2272  (nrow, ncol, ncell)
#> resolution : 0.8333333, 0.8333333  (x, y)
#> extent     : -125.0208, -65.85417, 23.27083, 49.9375  (xmin, xmax, ymin, ymax)
#> crs        : +proj=longlat +datum=WGS84 +no_defs
#> source     : map_wgs84.tif
#> names      : map_wgs84
#> values     : -0.7205295, 5.545086  (min, max)
plot(r)
tile_dir = "tiles"
tile(map, tile_dir, "0-3")
tiler_options()
tiler_options(osgeo4w = "C:/OSGeo4W64/OSGeo4W.bat")
tiler_options()
tiler_options(osgeo4w = "C:/OSGeo4W64/OSGeo4W.bat")
tiler_options()
tile(str_name, "tiles", "0-10")
library(tiler)
library(raster)
library(mapview)
tiler_options()
getwd()
library(raster)
library(mapview)
x <- system.file("maps/map_wgs84.tif", package = "tiler")
tile(x, "tiles", 0)
vignette(package = "tiler")
library(tiler)
library(raster)
library(mapview)
tiler_options()
tiler_options(osgeo4w = "C:/OSGeo4W/OSGeo4W.bat")
getwd()
x <- system.file("maps/map_wgs84.tif", package = "tiler")
tile(x, "tiles", 0)
library(tiler)
library(raster)
library(mapview)
tiler_options()
tiler_options(osgeo4w = "C:/OSGeo4W/OSGeo4W.bat")
tiler_options()
x <- system.file("maps/map_wgs84.tif", package = "tiler")
tile(x, "tiles", 0)
vignette(package = "tiler")
tile(x, "tiles", "0-10")
# map <- system.file(str_name, package = "tiler")
map <- 'WDPA_50Rich_8Bit.tif'
#> class      : RasterLayer
#> dimensions : 32, 71, 2272  (nrow, ncol, ncell)
#> resolution : 0.8333333, 0.8333333  (x, y)
#> extent     : -125.0208, -65.85417, 23.27083, 49.9375  (xmin, xmax, ymin, ymax)
#> crs        : +proj=longlat +datum=WGS84 +no_defs
#> source     : map_wgs84.tif
#> names      : map_wgs84
#> values     : -0.7205295, 5.545086  (min, max)
plot(r)
tile(map, tile_dir, "0-3")
library(leaflet)
temp = "tiles/{z}/{x}/{-y}.png"
leaflet() %>%
clearGroup("overlay") %>%
addTiles(urlTemplate = temp,
group = 'overlay',
tileOptions(opacity = 0.7))
leaflet()
getwd()
temp = "tiles/{z}/{x}/{y}.png"
leaflet() %>%
clearGroup("overlay") %>%
addTiles(urlTemplate = temp,
group = 'overlay',
tileOptions(opacity = 0.7))
shiny::runApp('C:/Users/SWajahatAli/Downloads/birdRanger')
temp <- paste(level[as.character(input$threshold)],"/{z}/{x}/{-y}.png",sep="")
temp
leaflet() %>%
clearGroup("overlay") %>%
addTiles(urlTemplate = temp,
group = 'overlay',
tileOptions(opacity = 0.7))
leaflet(
options = leafletOptions(
crs = leafletCRS("L.CRS.Simple"),
minZoom = 0, maxZoom = 3, attributionControl = FALSE), width = "100%") %>%
addTiles(temp) %>% setView(71, -60, 3)
leaflet(
options = leafletOptions(
crs = leafletCRS("L.CRS.Simple"),
minZoom = 0, maxZoom = 3, attributionControl = FALSE), width = "100%") %>%
addTiles(temp)
leaflet(
options = leafletOptions(
crs = leafletCRS("L.CRS.Simple"),
minZoom = 0, maxZoom = 3, attributionControl = FALSE), width = "100%")
leaflet(
options = leafletOptions(
crs = leafletCRS("L.CRS.Simple"),
minZoom = 0, maxZoom = 3, attributionControl = FALSE), width = "100%") %>%
addTiles(temp)
temp = "tiles/{z}/{x}/{-y}.png"
leaflet() %>%
clearGroup("overlay") %>%
addTiles(urlTemplate = temp,
group = 'overlay',
tileOptions(opacity = 0.7))
leaflet(
options = leafletOptions(
crs = leafletCRS("L.CRS.Simple"),
minZoom = 0, maxZoom = 3, attributionControl = FALSE), width = "100%") %>%
addTiles(temp)
leaflet(
options = leafletOptions(
# crs = leafletCRS("L.CRS.Simple"),
minZoom = 0, maxZoom = 3, attributionControl = FALSE), width = "100%") %>%
addTiles(temp)
leaflet(
options = leafletOptions(
# crs = leafletCRS("L.CRS.Simple"),
minZoom = 0, maxZoom = 3, attributionControl = FALSE), width = "100%") %>%
addProviderTiles(providers$Esri.WorldTopoMap, group = "base") %>%
addTiles(temp)
tile(x, "tiles", 0)
leaflet(
options = leafletOptions(
# crs = leafletCRS("L.CRS.Simple"),
minZoom = 0, maxZoom = 3, attributionControl = FALSE), width = "100%") %>%
addProviderTiles(providers$Esri.WorldTopoMap, group = "base") %>%
addTiles(temp)
leaflet() %>%
clearGroup("overlay") %>%
addTiles(urlTemplate = temp,
group = 'overlay',
tileOptions(opacity = 0.7))
temp = "www/tiles/{z}/{x}/{-y}.png"
temp = "www/tiles/{z}/{x}/{-y}.png"
leaflet() %>%
clearGroup("overlay") %>%
addTiles(urlTemplate = temp,
group = 'overlay',
tileOptions(opacity = 0.7))
temp = "www/tiles/{z}/{x}/{-y}.png"
leaflet() %>%
clearGroup("overlay") %>%
addTiles(urlTemplate = temp,
group = 'overlay',
tileOptions(opacity = 0.7))
temp = "tiles/{z}/{x}/{-y}.png"
leaflet() %>%
clearGroup("overlay") %>%
addTiles(urlTemplate = temp,
group = 'overlay',
tileOptions(opacity = 0.7))
library(shiny)
source('app.R')
source('app.R')
source('app.R')
source('app.R')
source('app.R')
runApp()
# map <- system.file(str_name, package = "tiler")
map <- 'WDPA_50Rich_8Bit.tif'
str_name
tile(str_name, "WDPA_50_tiles", "0-10")
tile(str_name, "WDPA_50_tiles", "0-10")
tile(str_name, "WDPA_50_tiles", "0-3")
runApp()
runApp()
tile(x, "tiles", "0-10")
runApp()
tile(x, "tiles", "0-3")
runApp()
x <- system.file("maps/map_albers.tif", package = "tiler")
tile(x, "tiles", "0-3")
runApp()
pal <- colorRampPalette(c("darkblue", "lightblue"))(20)
nodata <- "tomato"
tile(x, "tiles", "0-3", col = pal, colNA = nodata)
runApp()
runApp()
crs <- "+proj=aea +lat_1=29.5 +lat_2=45.5 +lat_0=37.5 +lon_0=-96 +x_0=0 +y_0=0 +ellps=GRS80 +datum=NAD83 +units=m +no_defs +towgs84=0,0,0"
tile(str_name, "WDPA_50_tiles", "0-3",crs)
library(tiler)
library(raster)
library(leaflet)
library(mapview)
colorList <- c('#1C6FF8', '#27BBE0', '#31DB92', '#1BF118', '#9BFA24', '#FEF720' )
outDir = "www/wpda50"
map <- 'WDPA_50Rich_8Bit.tif'
crs <- "+proj=aea +lat_1=29.5 +lat_2=45.5 +lat_0=37.5 +lon_0=-96 +x_0=0 +y_0=0 +ellps=GRS80 +datum=NAD83 +units=m +no_defs +towgs84=0,0,0"
tile(map, outDir,"0-3",crs, col = colorList)
runApp()
runApp()
# tile(map, outDir,"0-3",crs, col = colorList)
tile(map, outDir,"0-3",col = colorList)
runApp()
(r <- raster(map))
# tile(map, outDir,"0-3",crs, col = colorList)
tile(map, outDir,"0-3",crs2,col = colorList)
crs1 = "+proj=aea +lat_1=-5 +lat_2=-42 +lat_0=-32 +lon_0=-60 +x_0=0 +y_0=0 +ellps=aust_SA +datum=WGS84 +units=m +no_defs"
crs2 = "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs"
(r <- raster(map))
# tile(map, outDir,"0-3",crs, col = colorList)
tile(map, outDir,"0-3",crs2,col = colorList)
runApp()
# tile(map, outDir,"0-3",crs, col = colorList)
tile(map, outDir,"0-10",crs2,col = colorList)
runApp()
runApp()
runApp('C:/Users/SWajahatAli/Downloads/birdRanger')
View(r)
r@data
View(r)
polys1 = rasterToPolygons(r)
runApp()
runApp('C:/Users/SWajahatAli/Downloads/birdRanger')
# map <- system.file(str_name, package = "tiler")
# map <- 'WDPA_50Rich_8Bit.tif'
map <- 'Underprotected_8Bit.tif'
(r <- raster(map))
#> class      : RasterLayer
#> dimensions : 32, 71, 2272  (nrow, ncol, ncell)
#> resolution : 0.8333333, 0.8333333  (x, y)
#> extent     : -125.0208, -65.85417, 23.27083, 49.9375  (xmin, xmax, ymin, ymax)
#> crs        : +proj=longlat +datum=WGS84 +no_defs
#> source     : map_wgs84.tif
#> names      : map_wgs84
#> values     : -0.7205295, 5.545086  (min, max)
plot(r)
#> class      : RasterLayer
#> dimensions : 32, 71, 2272  (nrow, ncol, ncell)
#> resolution : 0.8333333, 0.8333333  (x, y)
#> extent     : -125.0208, -65.85417, 23.27083, 49.9375  (xmin, xmax, ymin, ymax)
#> crs        : +proj=longlat +datum=WGS84 +no_defs
#> source     : map_wgs84.tif
#> names      : map_wgs84
#> values     : -0.7205295, 5.545086  (min, max)
plot(r)
#> class      : RasterLayer
#> dimensions : 32, 71, 2272  (nrow, ncol, ncell)
#> resolution : 0.8333333, 0.8333333  (x, y)
#> extent     : -125.0208, -65.85417, 23.27083, 49.9375  (xmin, xmax, ymin, ymax)
#> crs        : +proj=longlat +datum=WGS84 +no_defs
#> source     : map_wgs84.tif
#> names      : map_wgs84
#> values     : -0.7205295, 5.545086  (min, max)
par(mar=c(1,1,1,1))
plot(r)
library(tiler)
library(raster)
library(leaflet)
library(mapview)
tiler_options(osgeo4w = "C:/OSGeo4W/OSGeo4W.bat")
tiler_options()
colorList <- c('#1C6FF8', '#27BBE0', '#31DB92', '#1BF118', '#9BFA24', '#FEF720' )
outDir = "www/Underprotected"
# map <- 'WDPA_50Rich_8Bit.tif'
map <- 'Underprotected_8Bit.tif'
crs <- "+proj=aea +lat_1=29.5 +lat_2=45.5 +lat_0=37.5 +lon_0=-96 +x_0=0 +y_0=0 +ellps=GRS80 +datum=NAD83 +units=m +no_defs +towgs84=0,0,0"
crs1 = "+proj=aea +lat_1=-5 +lat_2=-42 +lat_0=-32 +lon_0=-60 +x_0=0 +y_0=0 +ellps=aust_SA +datum=WGS84 +units=m +no_defs"
crs2 = "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs"
(r <- raster(map))
# tile(map, outDir,"0-3",crs, col = colorList)
tile(map, outDir,"0-10",crs2,col = colorList)
runApp()
shiny::runApp()
runApp('C:/Users/SWajahatAli/Downloads/birdRanger')
runApp()
tile_layer <- raster(str_name)
str_name<-'WDPA_50Rich_8Bit.tif'
tile_layer <- raster(str_name)
